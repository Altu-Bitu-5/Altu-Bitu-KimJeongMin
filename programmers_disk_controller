import heapq
def solution(jobs):
    answer = 0 # 작업하는데 걸린 총 소요시간
    now = 0 # 현재 시간
    i = 0 # 처리한 작업의 수
    start = -1 # 직전에 완료한 작업의 시작 시간
    heap = [] # 남은 작업 중 현재 처리 가능한 작업을 저장하는 힙
    
    while i < len(jobs):
        # 현재 시점에서 처리할 수 있는 작업을 힙에 저장
        for j in jobs:
            if start < j[0] <= now: # 작업의 요청시간이 직전에 끝낸 작업보다 크고, 현재 시간보다 작은 경우 작업이 가능힘
                heapq.heappush(heap, [j[1], j[0]]) # 작업 처리 시간, 작업 요청 시간 순으로 힙에 저장
        
        if len(heap) > 0: # 힙의 길이가 0보다 큰 경우, 힙에 처리할 작업이 남은 경우
            current = heapq.heappop(heap) #current는 현재 처리 중인 작업의 정보
            start = now
            now += current[0]
            answer += (now - current[1]) # 작업 요청 시간부터 작업 처리 완료 시간까지 총 소요시간
            i += 1
        else: # 힙의 길이가 0인 경우, 처리할 작업이 없는 경우
            now += 1
            
    answer = answer // len(jobs) # 평균 처리 시간 계산
    
    return answer
    
